Description: CD12352 - Infrastructure as Code Project - Udagram - Paul Ogier

#TODO: Add ressource tags
Parameters:
  PROJECTNAME:
    Type: String
    Description: Tag name for our resources
    Default: udacity-ogierpaul
  AsgDesiredCapacity:
    Type: Number
    Description: Desired capacity for the fleet of instances
    Default: 1
  PrivateS3BucketName:
    Type: String
    Description: Private S3 bucket
    Default: udacity-ogierpaul

Resources:

#### EC2 servers and associated configs ###
### Launch template, Security group, Autoscaling group
  WebAppLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      DependsOn: StaticPrivateS3Bucket
      Properties: 
        LaunchTemplateData:
          ImageId: ami-008fe2fc65df48dac # Canonical, Ubuntu, 22.04 LTS, amd64 jammy image build on 2023-12-07 64-bit x86
          UserData:
            Fn::Base64: |
              #!/bin/bash
              apt-get update -y
              sudo apt-get install nginx -y
              service nginx start
          SecurityGroupIds:
            - !Ref WebAppSecurityGroup
          InstanceType: t2.micro
          BlockDeviceMappings:
            - DeviceName: "/dev/sdk" 
              Ebs:
                VolumeSize: '10'
          IamInstanceProfile:
            Name: !Ref Ec2InstanceProfile          
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP Access to the Web app servers from the LoadBalancer Security Group"
      VpcId:
        Fn::ImportValue:
          !Sub "${PROJECTNAME}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${PROJECTNAME}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '4'
      DesiredCapacity: !Ref AsgDesiredCapacity
      MaxSize: '6'
      TargetGroupARNs:
        - Ref: TargetGroup 
  
######## LOAD BALANCER and its components ######
# 1. Security group allowing http access on port 80
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http access to our load balancer"
      VpcId:
        Fn::ImportValue:
          !Sub "${PROJECTNAME}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
# 2. Loadblancer located in public subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${PROJECTNAME}-public-subnet1"
      - Fn::ImportValue: !Sub "${PROJECTNAME}-public-subnet2"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup 
# 3. Listeners attached to the Loadbalancer and to the Autoscaling group, listening on port 80
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
# 4. Additional rule for forwarding
  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${PROJECTNAME}-vpc-id"
############

##### S3 Bucket and its components
  StaticPrivateS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${PrivateS3BucketName}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${PROJECTNAME}-s3contentrw
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject'
              - 's3:GetObject'
              Resource:
                - !GetAtt StaticPrivateS3Bucket.Arn
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole 

Outputs:

  # Output the name of the S3 Bucket
  StaticPrivateBucketName:
    Description: "Name of the private S3 bucket for static assets."
    Value: !Ref StaticPrivateS3Bucket
    Export:
      Name: !Sub "${PROJECTNAME}-StaticPrivateS3Bucket"


  LoadBalancerDNSURL:
    Value: !Join [ "", [ 'http://', !GetAtt LoadBalancer.DNSName ]]
    Export:
      Name: !Sub "${PROJECTNAME}-LoadBalancerDNSURL"